agg_pct = agg_pct_data)
# Inspect the data.
summary(agg_data)
# Plot a scattergraph of income and housing prices.
plot(agg_data[, 'income'],
agg_data[, 'agg_pct'],
main = 'Aggregate Income vs. Pct. in Agriculture',
xlab = 'Income',
ylab = 'Pct. in Agriculture',
col = 'blue')
# Estimate a regression model.
lm_model <- lm(data = agg_data,
formula = income ~ agg_pct)
# Output the results to screen.
summary(lm_model)
##################################################
#
# GEB 6895: Tools for Business Intelligence
#
# Douglas Stigler
#Assignment 4 Answers
#
# OLS Regression Demo
# Regression with Data Entered Directly into the Script
#
# Lealand Morin, Ph.D.
# Assistant Professor
# Department of Economics
# College of Business Administration
# University of Central Florida
#
# September 16, 2019
#
##################################################
#
# Calculating_beta_hat gives an example of OLS regression
#   using data entered within this script.
#   It includes exercises to calculate the OLS
#   estimates from direct calculation and optimization.
#
# Dependencies:
#   None.
#
##################################################
##################################################
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
# Not required, since this program does not interact with other files.
# setwd(wd_path)
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Enter the dataset and run regression
##################################################
# Enter the numbers in the dataset.
income_data  <- c(14, 18, 18, 16, 16, 26, 20, 18, 20, 22)
agg_pct_data <- c(9, 10, 8, 7, 10, 4, 5, 5, 6, 7)
agg_data <- data.frame(income = income_data,
agg_pct = agg_pct_data)
# Inspect the data.
summary(agg_data)
# Plot a scattergraph of income and housing prices.
plot(agg_data[, 'income'],
agg_data[, 'agg_pct'],
main = 'Aggregate Income vs. Pct. in Agriculture',
xlab = 'Income',
ylab = 'Pct. in Agriculture',
col = 'blue')
# Estimate a regression model.
lm_model <- lm(data = agg_data,
formula = income ~ agg_pct)
# Output the results to screen.
summary(lm_model)
# Store the slope coefficient.
beta_1_hat_lm <- NA
pi
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
# Not required, since this program does not interact with other files.
# setwd(wd_path)
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
raries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Enter the dataset and run regression
##################################################
# Enter the numbers in the dataset.
income_data  <- c(14, 18, 18, 16, 16, 26, 20, 18, 20, 22)
agg_pct_data <- c(9, 10, 8, 7, 10, 4, 5, 5, 6, 7)
agg_data <- data.frame(income = income_data,
agg_pct = agg_pct_data)
# Inspect the data.
summary(agg_data)
# Plot a scattergraph of income and housing prices.
plot(agg_data[, 'income'],
agg_data[, 'agg_pct'],
main = 'Aggregate Income vs. Pct. in Agriculture',
xlab = 'Income',
ylab = 'Pct. in Agriculture',
col = 'blue')
# Estimate a regression model.
lm_model <- lm(data = agg_data,
formula = income ~ agg_pct)
# Output the results to screen.
summary(lm_model)
gression Demo
# Regression with Data Entered Directly into the Script
#
# Lealand Morin, Ph.D.
# Assistant Professor
# Department of Economics
# College of Business Administration
# University of Central Florida
#
# September 16, 2019
#
##################################################
#
# Calculating_beta_hat gives an example of OLS regression
#   using data entered within this script.
#   It includes exercises to calculate the OLS
#   estimates from direct calculation and optimization.
#
# Dependencies:
#   None.
#
##################################################
##################################################
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
# Not required, since this program does not interact with other files.
# setwd(wd_path)
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Enter the dataset and run regression
##################################################
# Enter the numbers in the dataset.
income_data  <- c(14, 18, 18, 16, 16, 26, 20, 18, 20, 22)
agg_pct_data <- c(9, 10, 8, 7, 10, 4, 5, 5, 6, 7)
agg_data <- data.frame(income = income_data,
agg_pct = agg_pct_data)
# Inspect the data.
summary(agg_data)
# Plot a scattergraph of income and housing prices.
plot(agg_data[, 'income'],
agg_data[, 'agg_pct'],
main = 'Aggregate Income vs. Pct. in Agriculture',
xlab = 'Income',
ylab = 'Pct. in Agriculture',
col = 'blue')
# Estimate a regression model.
lm_model <- lm(data = agg_data,
formula = income ~ agg_pct)
# Output the results to screen.
summary(lm_model)
coef(lm_model)
beta_1_hat_lm <- coef(lm_model$agg_pct)
beta_1_hat_lm <- coef(lm_model)["agg_pct"]
beta_1_hat_lm
mean_x <- mean(x)
# Output the results to screen.
summary(lm_model)
# Store the slope coefficient.
beta_1_hat_lm <- coef(lm_model)["agg_pct"]
##################################################
# Estimating beta from direct calculation
##################################################
# Calculate the estimate of the slope coefficient above.
y <- agg_data[, 'income']
x <- agg_data[, 'agg_pct']
#finding the means
mean_x <- mean(x)
mean_y <-  mean(y)
beta_1_hat_calc <- NA
# Compare with the output above.
mean_x
y <- agg_data[, 'income']
x <- agg_data[, 'agg_pct']
#finding the means
beta_1_hat_calc <- function(x,y){
(y - mean(y))(x-mean(x))/((x-mean(x))^2)
}
beta_1_hat_calc
y <- agg_data[, 'income']
x <- agg_data[, 'agg_pct']
#finding the means
beta_1_hat_calc <- function(x,y){
sum((y - mean(y))(x-mean(x)))
/
sum(((x-mean(x))^2))
}
y <- agg_data[, 'income']
x <- agg_data[, 'agg_pct']
#finding the means
beta_1_hat_calc <- function(x,y){
sum((y - mean(y))(x-mean(x))) / sum(((x-mean(x))^2))
}
# Compare with the output above.
sum((y - mean(y))(x-mean(x)))
sum((y - mean(y)(x-mean(x)))
sum((y - mean(y))(x-mean(x)))
sum((y - mean(y))*(x-mean(x)))
y <- agg_data[, 'income']
x <- agg_data[, 'agg_pct']
#finding the means
beta_1_hat_calc <- function(x,y){
sum((y - mean(y))*(x-mean(x))) / sum(((x-mean(x))^2))
}
beta_1_hat_calc <- function(x,y){
sum((y - mean(y))*(x-mean(x))) / sum(((x-mean(x))^2))
}
beta_1_hat_calc
Compare with the output above.
print(beta_1_hat_calc(x,y))
print(beta_1_hat_lm)
# Compare with the output above.
print(beta_1_hat_calc(x,y))
print(beta_1_hat_lm)
# Enter the numbers in the dataset.
income_data  <- c(14, 18, 18, 16, 16, 26, 20, 18, 20, 22)
agg_pct_data <- c(9, 10, 8, 7, 10, 4, 5, 5, 6, 7)
agg_data <- data.frame(income = income_data,
agg_pct = agg_pct_data)
# Inspect the data.
summary(agg_data)
# Plot a scattergraph of income and housing prices.
plot(agg_data[, 'income'],
agg_data[, 'agg_pct'],
main = 'Aggregate Income vs. Pct. in Agriculture',
xlab = 'Income',
ylab = 'Pct. in Agriculture',
col = 'blue')
points(agg_data[, 'income'],
agg_data[, 'agg_pct'] + 1.5,
col = 'red',
pch = 20)
abline(lm_model)
abline(a = 4, b = 0.1,
lwd = 1, col = 'red')
abline(h = c(10), v = c(25),
lwd = 1, col = 'green')
#################################################
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
# Not required, since this program does not interact with other files.
# setwd(wd_path)
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Enter the dataset and run regression
##################################################
# Enter the numbers in the dataset.
income_data  <- c(14, 18, 18, 16, 16, 26, 20, 18, 20, 22)
agg_pct_data <- c(9, 10, 8, 7, 10, 4, 5, 5, 6, 7)
agg_data <- data.frame(income = income_data,
agg_pct = agg_pct_data)
# Inspect the data.
summary(agg_data)
# Plot a scattergraph of income and housing prices.
plot(agg_data[, 'income'],
agg_data[, 'agg_pct'],
main = 'Aggregate Income vs. Pct. in Agriculture',
xlab = 'Income',
ylab = 'Pct. in Agriculture',
col = 'blue')
points(agg_data[, 'income'],
agg_data[, 'agg_pct'] + 1.5,
col = 'red',
pch = 20)
abline(lm_model)
abline(a = 4, b = 0.1,
lwd = 1, col = 'red')
#abline(h = c(10), v = c(25),
#       lwd = 1, col = 'green')
##################################################
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# No libraries required.
# GEB 6895: Tools for Business Intelligence
#
# OLS Regression Demo
# Simulation with repeated estimation
#
# Lealand Morin, Ph.D.
# Assistant Professor
# Department of Economics
# College of Business Administration
# University of Central Florida
#
# September 21, 2019
#
##################################################
#
# OLS_On_Repeat gives an example of OLS regression
#   using simulated data.
#   It repeats the estimation several times to get a
#   distribution of estimates.
#
##################################################
##################################################
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
wd_path <- '~/GEB6895/My_Mirror/GEB6895F19-1/assignment_05'
setwd(wd_path)
# Or do this in one step (using buttons in  File panel).
setwd("~/GEB6895/My_Mirror/GEB6895F19-1/assignment_05")
# Read function for sampling data.
source('House_Price_Sim_Data.R')
# This is the same as running the House_Price_Sim_Data.R script first.
# It assumes that the script is saved in the same working folder.
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Setting the Parameters
##################################################
# Dependent Variable: Property values (in Millions)
beta_0          <-   0.10    # Intercept
beta_income     <-   5.00    # Slope ceofficient for income
beta_cali       <-   0.25    # Slope coefficient for California
beta_earthquake <- - 0.50    # Slope coefficient for earthquake
# beta_earthquake <- - 0.00    # Slope coefficient for earthquake
# Distribution of incomes (also in millions).
avg_income <- 0.1
sd_income <- 0.01
# Extra parameter for measurement error in income.
measurement_error_income <- 0.01
# Fraction of dataset in California.
pct_in_cali <- 0.5
# Frequency of earthquakes (only in California).
prob_earthquake <- 0.05
# Additional terms:
sigma_2 <- 0.1        # Variance of error term
num_obs <- 100      # Number of observations in dataset
# Set the number of replications in the simulation.
num_replications <- 1000
##################################################
# Generating the Fixed Data
##################################################
# Call the housing_sample function from ECO6416_Sim_Data.R.
housing_data <- housing_sample(beta_0, beta_income, beta_cali, beta_earthquake,
avg_income, sd_income, pct_in_cali, prob_earthquake,
sigma_2, num_obs)
# Summarize the data.
summary(housing_data)
# Check that earthquakes occurred only in California:
table(housing_data[, 'in_cali'], housing_data[, 'earthquake'])
# Data errors are the largest cause of problems in model-building.
##################################################
# Generating Additional Data
# The extra data that is not in the model
##################################################
#--------------------------------------------------
# Assume that true income is not observed but some variables
# that are correlated with income are available.
#--------------------------------------------------
# Income measure 1.
housing_data[, 'income_1'] <- 0
housing_data[, 'income_1'] <- housing_data[, 'income'] +
rnorm(n = num_obs, mean = 0, sd = measurement_error_income)
# Income measure 2.
housing_data[, 'income_2'] <- 0
housing_data[, 'income_2'] <- housing_data[, 'income'] +
rnorm(n = num_obs, mean = 0, sd = measurement_error_income)
##################################################
# Running a Simulation
# Estimating Again and Again
##################################################
# Set the list of variables for the estimation.
list_of_variables <- c('income_1', 'in_cali', 'earthquake')
# list_of_variables <- c('income_1', 'in_cali', 'earthquake')
# Add beta_0 to the beginning for the full list.
full_list_of_variables <- c('intercept', list_of_variables)
# Create an empty data frame to store the results.
reg_results <- data.frame(reg_num = 1:num_replications)
reg_results[, full_list_of_variables] <- 0
reg_results[, c('income', 'income_1', 'income_2')] <- 0
# Generate repeated realizations of the housing_data dataset.
for (reg_num in 1:num_replications) {
# Print a progress report.
# print(sprintf('Now estimating model number %d.', reg_num))
##################################################
# Generating the Random Data
##################################################
# Repeat again and again, replacing only the epsilon values.
# Generate the error term, which includes everything we do not observe.
housing_data[, 'epsilon'] <- rnorm(n = num_obs, mean = 0, sd = sigma_2)
# Finally, recalculate the simulated value of house prices,
# according to the regression equation.
housing_data[, 'house_price'] <-
beta_0 +
beta_income * housing_data[, 'income'] +
beta_cali * housing_data[, 'in_cali'] +
beta_earthquake * housing_data[, 'earthquake'] +
housing_data[, 'epsilon']
# Each time, this replaces the house_price with a different version
# of the error term.
##################################################
# Estimating the Regression Model
##################################################
# Specify the formula to estimate.
lm_formula <- as.formula(paste('house_price ~ ',
paste(list_of_variables, collapse = ' + ')))
# Estimate a regression model.
lm_full_model <- lm(data = housing_data,
formula = lm_formula)
# Note that the normal format is:
# model_name <- lm(data = name_of_dataset, formula = Y ~ X_1 + x_2 + x_K)
# but the above is a shortcut for a pre-set list_of_variables.
##################################################
# Saving the Results
##################################################
# Save the estimates in the row for this particular estimation.
reg_results[reg_num, full_list_of_variables] <- coef(lm_full_model)
}
##################################################
# Analyzing the Results
##################################################
#--------------------------------------------------
# Display some graphs
# Click the arrows in the bottom right pane to
# switch between previous figures.
#--------------------------------------------------
# Plot a histogram for each estimate.
# Note that some will be empty if they were not
hist(reg_results[, 'intercept'],
main = 'Distribution of beta_0',
xlab = 'Estimated Coefficient',
ylab = 'Frequency')
hist(reg_results[, 'earthquake'],
main = 'Distribution of beta_earthquake',
xlab = 'Estimated Coefficient',
ylab = 'Frequency')
hist(reg_results[, 'in_cali'],
main = 'Distribution of beta_cali',
xlab = 'Estimated Coefficient',
ylab = 'Frequency')
# Display some statistics for the result.
summary(reg_results[, full_list_of_variables])
# Calculate the average estimates separately.
print('Average value of the coefficients are:')
sapply(reg_results[, full_list_of_variables], mean)
# Calculate the standard deviation of the estimates.
print('Standard Deviations of the coefficients are:')
sapply(reg_results[, full_list_of_variables], sd)
#sample size
n <- 100
#parameter values
beta_0 <- 2
#generating data
sigma <- 2.5
epsilon <- sigma*rnorm(n)
plot((1:n), epsilon, ylim=c(-3*sigma, 3*sigma), xlab = "Observation i", ylab = "epsilon_i", main = "epsilon",
pch=16)
Y<- beta_0 + epsilon
plot( (1:n), Y, xlab = "i-th observation", ylab = "Y_i", main = "``scatter plot`` for Y",
ylim=c(beta_0-3*sigma, beta_0+3*sigma),
pch=16)
curve(beta_0+0*x, type = "l", lwd = 3,  col = "green", add = TRUE)
regression <- lm(Y~1)
summary(regression)
beta_0_hat <- regression$coefficients[1]
#mean(Y)
curve(beta_0_hat + 0*x, type = "l", lwd=3, col = "red", add = TRUE)
se <- sqrt( ( sum( (regression$residuals)^2 )  )/(n-1) )      / sqrt(n)
#95% CI
curve(beta_0_hat+1.96*se + 0*x, type = "l", lty =2, lwd=3, col = "red", add = TRUE)
curve(beta_0_hat-1.96*se + 0*x, type = "l", lty =2, lwd=3, col = "red", add = TRUE)
# Display some statistics for the result.
summary(reg_results[, full_list_of_variables])
# Calculate the average estimates separately.
print('Average value of the coefficients are:')
sapply(reg_results[, full_list_of_variables], mean)
# Calculate the standard deviation of the estimates.
print('Standard Deviations of the coefficients are:')
sapply(reg_results[, full_list_of_variables], sd)
#--------------------------------------------------
# Output some statistics to screen
#--
