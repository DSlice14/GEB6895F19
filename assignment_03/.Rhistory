x_values <- seq(-50, 50, by 1)
x_values <- seq(-50, 50, by=1)
seq(-50, 50, by=1)
x_values <- seq(-50, 50, by=0.01)
seq(-50, 50, by=0.01)
f <- function(x)
{
temp <- x^2
return(temp)
}
x_values <- seq(-50, 50, by=0.01)
f <- function(x)
{
temp <- x^2
return(temp)
}
f(7)
(-2:2)
f(-2:2)
f(x_values)
plot(x_Values,f(x_Values))
plot(x_values,f(x_values))
plot(x_values,2*f(x_values))
plot(x_values,f(x_values))
g <- function(x)
{
temp <- (x-20)^2
return(temp)
}
plot(x_values,f(x_values), type="1")
plot(x_values,g(x_values), type="1")
plot(x_values,f(x_values))
plot(x_values,g(x_values))
f <- function(x)
{
temp <- x^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2
return(temp)
}
plot(x_values,f(x_values))
plot(x_values,g(x_values))
plot(x_values,f(x_values))
plot(x_values,g(x_values))
plot(x_values,f(x_values), type="l")
plot(x_values,g(x_values), type="l")
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
g(14)
g(225)
g(20)
plot(x_values,f(x_values), type="l")
points(x_values,g(x_values), type="l")
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 5
return(temp)
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#QMB 9/16/19
#setting the values of x using sequence
x_values <- seq(-50, 50, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#creating the g function
g <- function(x)
{
temp <- ((x-20)^2 - 100)
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#setting the values of x using sequence
x_values <- seq(-50, 50, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- ((x-20)^2 - 100)
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
f <- function(x)
{
temp <- x^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
#creating the h function
h <- function(x)
{
temp <- .25*(x)^2+ 1/x
return(temp)
}
.25*(x)^2+ 1/x
#plot h(x), type is line graph
plot(x_values,h(x_values), type="l")
#QMB 9/16/19
#setting the values of x using sequence
x_values <- seq(-5, 5, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#creating the h function
h <- function(x)
{
temp <- .25*(x)^2+ 1/x
return(temp)
}
#plot h(x), type is line graph
plot(x_values,h(x_values), type="l")
n <- 0
for(i in 1:n) {
total <-  i % 5
print(sprintf('Completed iteration %d', i))
}
n <- 10
for(i in 1:n) {
total <-  i % 5
print(sprintf('Completed iteration %d', i))
}
num_in <- readline(prompt="Enter a number:   ")
if (between(num_in, 1, 10)){
print("Blue")
between(num_in, 1, 10)
x <- 10
if (between(x, 1, 10)){
print("Blue")
x <- 9
#between
if (between(x, 1, 10)){
print("Blue")
x <- 9
x <- 9
num_in <- readline(prompt="Enter a number:   ")
9
num_in <- readline(prompt="Enter a number:   ")
as.integer(num_in)
num_in_int <- as.integer(num_in)
num_in <= 9
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <= 12
num_in <- 12
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ")
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
# Solution 1
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
answer <- answer + i
}
for (i in 1:num_in) {
if(numbers[i] %% 2 == 0) total[i] <- 1
answer <- 0
answer <- 0
num_stop <- readline(prompt="Enter a stopping point:   ")
10
num_stop <- readline(prompt="Enter a stopping point:   ")
num_stop <- readline(prompt="Enter a stopping point:   ")
10
sum_stop <- 10
num_stop <- 10
View(h)
num_stop <- readline(prompt="Enter a stopping point:   ")
1+2
num_stop <-10
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
5
num_stop <- readline(prompt="Enter a stopping point:   ")
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + i
}
print (count)
num_stop <- readline(prompt="Enter a stopping point:   ")
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + 1
}
print (count)
num_stop <- readline(prompt="Enter a stopping point:   ")
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + 1
}
print (count)
#end
n <- readline(prompt="Enter a number:   ")
# Solution 1
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
print(i)
}
num_in <- { readline(prompt="Enter a number:   ") }
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ");
num_in <- readline(prompt="Enter a number:   ");
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ");
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ");
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
max <- 5
sprintf("The mas is %s", max)
min <- 6
#print(avg & "is the average of the 5 numbers, " & max " is the max of the 5 numbers, and " & min " is the min of the 5 numbers")
sprintf("The mas is %s and the min is %s", max, min)
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + 1
}
print (count)
avg <- 4
sprintf("For the series of five numbers the max is %s, the min is %s, and the average is %s", max, min, avg)
#Model with all variables
life_log2_model <- glm(data = hospital_data,
formula = D ~ DISTANCE + INCOME + OLD + OLD*DISTANCE)
#Summarize full model
summary(life_log2_model)
##################################################
#
# GEB 6895: Tools for Business Intelligence
#
# Assignment 3, Question 2
# Regression with Data from Spreadsheet
#
# Douglas Stigler
#
# Due October 9, 2019
#
##################################################
#
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- 'C:/Users/dougl/Documents/GEB6895/My_Mirror/GEB6895F19-1/assignment_03'
setwd(wd_path)
# Check folder:
getwd()
##################################################
# Read the dataset and run regression
##################################################
# Read the newly saved dataset.
hospital_data <- read.csv(file = 'hospital_choice.csv')
# Inspect the data.
summary(hospital_data)
#View Data
View(hospital_data)
# Column Names
colnames(hospital_data)
##################################################
# Full Linear Model
##################################################
#Model with all variables
life_linear_model <- lm(data = hospital_data,
formula = D ~ DISTANCE + INCOME + OLD)
#Summarize full model
summary(life_linear_model)
##################################################
# Full Logistic Model
##################################################
#Model with all variables
life_log_model <- glm(data = hospital_data,
formula = D ~ DISTANCE + INCOME + OLD)
#Summarize full model
summary(life_log_model)
##################################################
# Logistic Model #2
##################################################
#Model with all variables
life_log2_model <- glm(data = hospital_data,
formula = D ~ DISTANCE + INCOME + OLD + OLD*DISTANCE)
#Summarize full model
summary(life_log2_model)
##################################################
#Model with all variables
life_log2_model <- glm(data = hospital_data,
formula = D ~ DISTANCE + INCOME + OLD + OLD*DISTANCE)
#Summarize full model
summary(life_log2_model)
##################################################
Full Logistic Model
##################################################
#Model with all variables
life_log_model <- glm(data = hospital_data,
formula = D ~ DISTANCE + INCOME + OLD)
#Summarize full model
summary(life_log_model)
#Model with all variables
life_linear_model <- lm(data = hospital_data,
formula = D ~ DISTANCE + INCOME + OLD)
#Summarize full model
summary(life_linear_model)
