x_values <- seq(-50, 50, by 1)
x_values <- seq(-50, 50, by=1)
seq(-50, 50, by=1)
x_values <- seq(-50, 50, by=0.01)
seq(-50, 50, by=0.01)
f <- function(x)
{
temp <- x^2
return(temp)
}
x_values <- seq(-50, 50, by=0.01)
f <- function(x)
{
temp <- x^2
return(temp)
}
f(7)
(-2:2)
f(-2:2)
f(x_values)
plot(x_Values,f(x_Values))
plot(x_values,f(x_values))
plot(x_values,2*f(x_values))
plot(x_values,f(x_values))
g <- function(x)
{
temp <- (x-20)^2
return(temp)
}
plot(x_values,f(x_values), type="1")
plot(x_values,g(x_values), type="1")
plot(x_values,f(x_values))
plot(x_values,g(x_values))
f <- function(x)
{
temp <- x^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2
return(temp)
}
plot(x_values,f(x_values))
plot(x_values,g(x_values))
plot(x_values,f(x_values))
plot(x_values,g(x_values))
plot(x_values,f(x_values), type="l")
plot(x_values,g(x_values), type="l")
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
g(14)
g(225)
g(20)
plot(x_values,f(x_values), type="l")
points(x_values,g(x_values), type="l")
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 5
return(temp)
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#QMB 9/16/19
#setting the values of x using sequence
x_values <- seq(-50, 50, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#creating the g function
g <- function(x)
{
temp <- ((x-20)^2 - 100)
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#setting the values of x using sequence
x_values <- seq(-50, 50, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- ((x-20)^2 - 100)
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
f <- function(x)
{
temp <- x^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
#creating the h function
h <- function(x)
{
temp <- .25*(x)^2+ 1/x
return(temp)
}
.25*(x)^2+ 1/x
#plot h(x), type is line graph
plot(x_values,h(x_values), type="l")
#QMB 9/16/19
#setting the values of x using sequence
x_values <- seq(-5, 5, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#creating the h function
h <- function(x)
{
temp <- .25*(x)^2+ 1/x
return(temp)
}
#plot h(x), type is line graph
plot(x_values,h(x_values), type="l")
wdPath <- 'C:/Users/dougl/Documents/GEB6895/My_Mirror/GEB6895F19-1/demo_03_intro_to_R'
setwd(wdPath)
=======
# Clear workspace.
# rm is: The remove function removes everything in the workspace when the list is all.
rm(list=ls(all=TRUE))
wdPath <- 'C:/Users/dougl/Documents/GEB6895/My_Mirror/GEB6895F19-1/demo_03_intro_to_R'
setwd(wdPath)
workspace_file_name <- 'myWorkspace1'
workspace_path <- sprintf('%s/%s.RData', wd_path, workspace_file_name)
save.image(workspace_path)
################################################################################
# Data Types and Mathematical Operations
################################################################################
# The variables above are character strings.
class(workspace_path)
# The sprintf() is handed down from C.
# (Many C and FORTRAN programs are used in the background in R.)
string1 <- 'first string'
string2 <- 'second string'
full_string <- sprintf('Put the %s before the %s.', string1, string2)
# The '%s' is called an 'escape sequence'.
# It tells the sprintf() function to look for the next argument (which should be a string)
# And insert it in the place of the '%s'.
class(full_string)
# Most characters can be used in variable names.
some_numbers.integers <- 1:10
class(some_numbers.integers)
# Numeric is a broader class of, well, numeric variables.
value_of_pi <- pi
class(value_of_pi)
# Logical values denote true or false conditions.
true_statement1 <- value_of_pi == pi
class(true_statement1)
false_statement1 <- value_of_pi == pi + 2
class(false_statement1)
# Adding numeric variables can change the type.
pi_plus <- some_numbers.integers + value_of_pi
# Notice anything unusual?
pi_plus
# The concatenation function c() is used to form lists of objects.
more_integers <- c(some_numbers.integers, 11:15)
# Lets make a vector of important numbers.
value_of_e <- exp(1)
important_numbers <- c(value_of_pi, value_of_e)
# Try adding these to the integers.
important_numbers_plus <- some_numbers.integers + important_numbers
# What happened this time?
# Recycling might save the planet, but it might ruin your code.
# Use with caution!
three_important_numbers <- c(important_numbers, sqrt(pi))
three_important_numbers_plus <- some_numbers.integers + three_important_numbers
# What if we concatenate variables of different types?
mystery <- c(some_numbers.integers, 'This is a string')
# R 'coerces' variables to the more general type.
class(mystery)
# You can coerce the types of variables yourself.
num_string <- as.character(some_numbers.integers)
as.numeric(num_string)
# You can assemble several variables into a list (preserving individual types).
list_of_stuff <- list(thing1 = some_numbers.integers,
thing2 = value_of_pi)
other_list <- list(item1 = x1 <- 2, item2 = 'string')
x1
# Print it to screen.
list_of_stuff
class(list_of_stuff)
# Select an element of a list.
list_of_stuff$thing1
list_of_stuff['thing1']
list_of_stuff[2]
list_of_stuff[[1]]
class(list_of_stuff)
other_list
other_list
list_of_stuff$thing1
list_of_stuff['thing1']
list_of_stuff[2]
list_of_stuff[[1]]
exp(1)
value_of_pi <- pi
pi
e
exp(1)
list_of_stuff$thing1
list_of_stuff['thing1']
list_of_stuff[2]
list_of_stuff[[1]]
name(list_of_stuff)
for (name in names(list_of_stuff)) {
print(name)
}
names(list_of_stuff)
for (name in names(list_of_stuff)) {
print(name)
}
names(list_of_stuff)
for (name in names(list_of_stuff)) {
print(name)
print(mean(list_of_stuff[[name]]))
}
names(list_of_stuff)
for (name in names(list_of_stuff)) {
print(name)
print(mean(list_of_stuff[name]))
}
names(list_of_stuff)
for (name in names(list_of_stuff)) {
print(name)
print(mean(list_of_stuff[[name]))
}
names(list_of_stuff)
for (name in names(list_of_stuff)) {
print(name)
print(mean(list_of_stuff[[name]]))
}
for (name_num in 1:length(names(list_of_stuff))) {
name <- names(list_of_stuff)[names_num]
print(name)
}
for (name_num in 1:length(names(list_of_stuff))) {
name <- names(list_of_stuff)[name_num]
print(name)
}
multiply_two <- function(num_1, num_2, {num_1 * num_2})
print(multiply_two)
multiply_two <- function(num_1, num_2)
{num_1 * num_2
print(multiply_two)
}
df1 <- data.frame(var1 = 1:10, var2=sprintf('row%d', 1:10))
data.frame(var1 = 1:10, var2=sprintf('row%d', 1:10))
df2 <- data.frame(var1 = 11:20,
var2=sprintf('row%d', 11:20))
data.frame(var1 = 11:20,
sprintf('row%d', 11:20))
df3 <- data.frame(var1 = 21:30,
var2=sprintf('row%d', 21:30))
data.frame(var1 = 21:30,
var2=sprintf('row%d', 21:30))
print(Number Not 5 or 6)
print("Number Not 5 or 6")
if (num_in != 5|6){
print("Number Not 5 or 6")
}
Else {
print("Number is 5 or 6")
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in != 5|6){
print("Number Not 5 or 6")
}
num_in <- readline(prompt="Enter a number:   ")
num_in <- readline(prompt="Enter a number:   ")
if (num_in != 5|6){
print("Number Not 5 or 6")
}
else {
print("Number is 5 or 6")
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else if (weather == 'sunny') {
print('Number is 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else if (weather == 'sunny') {
print('Number is 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else if (weather == 'sunny') {
print('Number is 5 or 6')
}
if (num_in != '5'|'6') {
print('Number Not 5 or 6')
} else if (weather == 'sunny') {
print('Number is 5 or 6')
}
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else if (num_in == 5|6) {
print('Number is 5 or 6')
}
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else if (num_in == 5|6) {
print('Number is 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else if (num_in == 5|6) {
print('Number is 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
5
num_in <- readline(prompt="Enter a number:   ")
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else if (num_in == 5|6) {
print('Number is 5 or 6')
}
if (num_in != 5|6) {
print('Number Not 5 or 6')
} else {
print('Number is 5 or 6')
}
if (num_in == 5) {
print('Number is 5 or 6')
} else {
print('Number not 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in == 5) {
print('Number is 5 or 6')
} else if (num_in == 6) {
print('Number is 5 or 6')
} else {
print('Number not 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in == 5) {
print('Number is 5 or 6')
} else if (num_in == 6) {
print('Number is 5 or 6')
} else {
print('Number not 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in == 5) {
print('Number is 5 or 6')
} else if (num_in == 6) {
print('Number is 5 or 6')
} else {
print('Number not 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (num_in == 5) {
print('Number is 5 or 6')
} else if (num_in == 6) {
print('Number is 5 or 6')
} else {
print('Number not 5 or 6')
}
num_in <- readline(prompt="Enter a number:   ")
if (0 <= num_in <= 10 ){
print("Blue")
} else if (10 < num_in <= 20 ){
print("Red")
} else if (20 < num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
if (findInterval(num_in, c(0,10))){
print("Blue")
if (findInterval(num_in, c(0,10))){
print("Blue")
}
num_in <- readline(prompt="Enter a number:   ")
5
if (findInterval(num_in, c(0,10))){
print("Blue")
if (findInterval(num_in, c(0,10) == 1L)){
print("Blue")
}
if (findInterval(c(0,10), num_in)){
print("Blue")
if (num_in[between(num_in, 0, 10)){
print("Blue")
if (num_in[between(num_in, 0, 10){
print("Blue")
if (num_in[between(num_in, 0, 10)]){
print("Blue")
x <- rnorm(1e2)
x[between(x, -1, 1)]
x
if (between(num_in, 0, 10)){
print("Blue")
if (between(num_in, 0, 10)){
print("Blue")
}
x <- rnorm(1e2)
x[between(x, -1, 1)]
if (inrange(num_in, 1, 10, incbounds=TRUE)){
print("Blue")
if (inrange(num_in, 1, 10, incbounds=TRUE)){
print("Blue")
}
inrange(num_in, 1, 10, incbounds=TRUE)
