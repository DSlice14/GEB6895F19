#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#QMB 9/16/19
#setting the values of x using sequence
x_values <- seq(-50, 50, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#creating the g function
g <- function(x)
{
temp <- ((x-20)^2 - 100)
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
#setting the values of x using sequence
x_values <- seq(-50, 50, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- ((x-20)^2 - 100)
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
seq(-50, 50, by=0.01)
x_values <- seq(-50, 50, by=0.01)
f <- function(x)
{
temp <- x^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2
return(temp)
}
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#plot f(x), type is line graph
plot(x_values,f(x_values), type="l")
#points tells it to plot the line on the same graph as the previous
points(x_values,g(x_values), type="l")
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
source('~/QMB Fall 2019/Lecture_3.R', echo=TRUE)
#creating the h function
h <- function(x)
{
temp <- .25*(x)^2+ 1/x
return(temp)
}
.25*(x)^2+ 1/x
#plot h(x), type is line graph
plot(x_values,h(x_values), type="l")
#QMB 9/16/19
#setting the values of x using sequence
x_values <- seq(-5, 5, by=0.01)
#creating the f function
f <- function(x)
{
temp <- x^2
return(temp)
}
#creating the g function
g <- function(x)
{
temp <- (x-20)^2 - 100
return(temp)
}
#creating the h function
h <- function(x)
{
temp <- .25*(x)^2+ 1/x
return(temp)
}
#plot h(x), type is line graph
plot(x_values,h(x_values), type="l")
n <- 0
for(i in 1:n) {
total <-  i % 5
print(sprintf('Completed iteration %d', i))
}
n <- 10
for(i in 1:n) {
total <-  i % 5
print(sprintf('Completed iteration %d', i))
}
num_in <- readline(prompt="Enter a number:   ")
if (between(num_in, 1, 10)){
print("Blue")
between(num_in, 1, 10)
x <- 10
if (between(x, 1, 10)){
print("Blue")
x <- 9
#between
if (between(x, 1, 10)){
print("Blue")
x <- 9
x <- 9
num_in <- readline(prompt="Enter a number:   ")
9
num_in <- readline(prompt="Enter a number:   ")
as.integer(num_in)
num_in_int <- as.integer(num_in)
num_in <= 9
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <= 12
num_in <- 12
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ")
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
# Solution 1
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
answer <- answer + i
}
for (i in 1:num_in) {
if(numbers[i] %% 2 == 0) total[i] <- 1
answer <- 0
answer <- 0
num_stop <- readline(prompt="Enter a stopping point:   ")
10
num_stop <- readline(prompt="Enter a stopping point:   ")
num_stop <- readline(prompt="Enter a stopping point:   ")
10
sum_stop <- 10
num_stop <- 10
View(h)
num_stop <- readline(prompt="Enter a stopping point:   ")
1+2
num_stop <-10
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
answer <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
answer <- answer + i
}
5
num_stop <- readline(prompt="Enter a stopping point:   ")
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + i
}
print (count)
num_stop <- readline(prompt="Enter a stopping point:   ")
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + 1
}
print (count)
num_stop <- readline(prompt="Enter a stopping point:   ")
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + 1
}
print (count)
#end
n <- readline(prompt="Enter a number:   ")
# Solution 1
answer <- 0
for (i in 1:n) {
if (i%%5 == 0)
print(i)
}
num_in <- { readline(prompt="Enter a number:   ") }
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ");
num_in <- readline(prompt="Enter a number:   ");
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ");
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
num_in <- readline(prompt="Enter a number:   ");
#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
max <- 5
sprintf("The mas is %s", max)
min <- 6
#print(avg & "is the average of the 5 numbers, " & max " is the max of the 5 numbers, and " & min " is the min of the 5 numbers")
sprintf("The mas is %s and the min is %s", max, min)
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + 1
}
print (count)
avg <- 4
sprintf("For the series of five numbers the max is %s, the min is %s, and the average is %s", max, min, avg)
##################################################
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- 'C:/Users/dougl/Documents/GEB6895/My_Mirror/GEB6895F19-1/demo_05_OLS_in_R' # On Windows
setwd(wd_path)
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Read the dataset and run regression
##################################################
# Read the newly saved dataset.
housing_data <- read.csv(file = 'housing_data.csv')
# Inspect the data.
summary(housing_data)
# Check that earthquakes occurred only in California:
table(housing_data[, 'in_cali'], housing_data[, 'earthquake'])
# Data errors are the largest cause of problems in model-building.
# Plot a scattergraph of income and housing prices.
plot(housing_data[, 'income'],
housing_data[, 'house_price'],
main = c('House Prices vs. Income', '(all figures in millions)'),
xlab = 'Income',
ylab = 'House Prices',
col = 'blue')
# Calculate a correlation matrix for selected variables.
corr_matrix <- cor(housing_data[, c('house_price', 'income', 'in_cali', 'earthquake')])
print(round(corr_matrix, 3))
##################################################
# Estimating the Regression Model
# Model 1: All Variables Included
##################################################
#Note the formula objects
# y ~ x_1 + x_2 + x_3
# Estimate a regression model.
lm_full_model <- lm(data = housing_data,
formula = house_price ~ income + in_cali + earthquake)
# Output the results to screen.
summary(lm_full_model)
# Estimate a regression model.
lm_no_earthquakes <- lm(data = housing_data,
formula = house_price ~ income + in_cali) # earthquake removed.
# Output the results to screen.
summary(lm_no_earthquakes)
summary(housing_data[housing_data[, 'earthquake'] == 0, ])
summary(housing_data[housing_data[, 'earthquake'] == 1, ])
# Calculate the predictions from the fitted model.
housing_data[, 'predictions'] <- predict(lm_full_model,
newdata = housing_data)
summary(housing_data[, c('house_price', 'predictions')])
plot(housing_data[, c('house_price', 'predictions')],
main = 'Regression Model Predictions',
xlab = 'House Price',
ylab = 'Prediction')
# Plot the actual house prices against the regression model predictions.
plot(housing_data[, 'house_price'], housing_data[, 'predictions'],
main = 'Regression Model Predictions',
xlab = 'House Price',
ylab = 'Prediction')
points(housing_data[housing_data[, 'in_cali'] == 1, 'house_price'],
housing_data[housing_data[, 'in_cali'] == 1, 'predictions'],
col = 'green')
points(housing_data[housing_data[, 'earthquake'] == 1, 'house_price'],
housing_data[housing_data[, 'earthquake'] == 1, 'predictions'],
col = 'red')
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- 'C:/Users/dougl/Documents/GEB6895/My_Mirror/GEB6895F19-1/demo_05_OLS_in_R' # On Windows
setwd(wd_path)
# Verify that the path was assigned correctly.
getwd()
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Loading the Data and Conducting Initial Assessment
##################################################
credit_data <- read.csv('credit_data.csv')
# Inspect the contents.
summary(credit_data)
# Make sure there are no problems with the data.
# Inspect the dependent variable.
hist(credit_data[, 'default'])
# Inspect the correlations between numeric explanatory variables.
cor(credit_data[, 2:ncol(credit_data)])
# Be aware of any explanatory variables that are highly correlated
# (both positively and negatively) with each other.
##################################################
# Generating New Variables
##################################################
# You can create new variables by adding commands
# within this program that add new columns to the
# credit_data data frame.
# Estimate a regression model.
lm_model_1 <- lm(data = credit_data,
formula = default ~ bmaxrate + amount +
close + AA + A + B + C + D + bankcardutil)
# Output the results to screen.
summary(lm_model_1)
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- 'C:/Users/dougl/Documents/GEB6895/My_Mirror/GEB6895F19-1/demo_05_OLS_in_R' # On Windows
setwd(wd_path)
# Verify that the path was assigned correctly.
getwd()
# No libraries required.
# Otherwise would have a command like the following.
# library(name_of_R_package)
##################################################
# Loading the Data and Conducting Initial Assessment
##################################################
credit_data <- read.csv('credit_data.csv')
# Inspect the contents.
summary(credit_data)
# Make sure there are no problems with the data.
# Inspect the dependent variable.
hist(credit_data[, 'default'])
# Inspect the correlations between numeric explanatory variables.
cor(credit_data[, 2:ncol(credit_data)])
# Be aware of any explanatory variables that are highly correlated
# (both positively and negatively) with each other.
##################################################
# Generating New Variables
##################################################
# You can create new variables by adding commands
# within this program that add new columns to the
# credit_data data frame.
##################################################
# Estimating a Regression Model
# Model 1: Linear model for default probability
# Start with a full model that includes all variables.
##################################################
# Estimate a regression model.
lm_model_1 <- lm(data = credit_data,
formula = default ~ bmaxrate + amount +
close + AA + A + B + C + D + bankcardutil)
# Output the results to screen.
summary(lm_model_1)
# Calculate the predictions of this model.
credit_data[, 'default_prob_lm'] <- predict(lm_model_1)
summary(credit_data[, 'default_prob_lm'])
# Does anything look unusual?
lm_model_1 <- lm(data = credit_data,
formula = default ~ bmaxrate + amount +
close + AA + A + B + C + D + bankcardutil)
# Output the results to screen.
summary(lm_model_1)
# Calculate the predictions of this model.
credit_data[, 'default_prob_lm'] <- predict(lm_model_1)
summary(credit_data[, 'default_prob_lm'])
# Does anything look unusual?
# Estimate a logistic regression model.
logit_model_1 <- glm(data = credit_data,
formula = default ~ bmaxrate + amount +
close + AA + A + B + C + D + bankcardutil,
family = 'binomial')
# Output the results to screen.
summary(logit_model_1)
# Estimate a logistic regression model.
logit_model_1 <- glm(data = credit_data,
formula = default ~ bmaxrate + amount +
close + AA + A + B + C + D + bankcardutil,
family = 'binomial')
# Output the results to screen.
summary(logit_model_1)
Estimating a Regression Model
# Model 3: Logistic model for default probability
#
##################################################
# Estimate a logistic regression model.
logit_model_1 <- glm(data = credit_data,
formula = default ~ bmaxrate + amount +
close + AA + A + B + C + D + bankcardutil,
family = 'binomial')
# Output the results to screen.
summary(logit_model_1)
# Calculate the predictions of this model.
credit_data[, 'default_prob_logit'] <- predict(logit_model_1, type = 'response')
summary(credit_data[, 'default_prob_logit'])
# Does this look better?
