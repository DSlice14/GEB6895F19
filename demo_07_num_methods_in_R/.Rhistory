#between
if (num_in < 0){
print("Not a correct color option")
} else if (num_in <= 10 ){
print("Blue")
} else if (num_in <= 20 ){
print("Red")
} else if (num_in <= 30 ){
print("Green")
} else {
print("Not a correct color option")
}
max <- 5
sprintf("The mas is %s", max)
min <- 6
#print(avg & "is the average of the 5 numbers, " & max " is the max of the 5 numbers, and " & min " is the min of the 5 numbers")
sprintf("The mas is %s and the min is %s", max, min)
count <- 0
for (i in 1:num_stop) {
if (i%%2 == 0)
count <- count + 1
}
print (count)
avg <- 4
sprintf("For the series of five numbers the max is %s, the min is %s, and the average is %s", max, min, avg)
install.packages("openxlsx")
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- '~/Teaching/GEB6895_Fall_2019/GitRepos/demo_06_Excel_with_R' # On Windows
setwd(wd_path)
# Check folder:
getwd()
# Load libraries.
# Load library to interact with Microsoft Excel.
library(openxlsx)
######################################
# Open the workbook and create a workbook object.
wb_in <- loadWorkbook(file = 'housing_data.xlsx')
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- '~C:\Users\dougl\Documents\GEB6895\My_Mirror\GEB6895F19-1\demo_06_Excel_with_R' # On Windows
setwd(wd_path)
# Check folder:
getwd()
# Load libraries.
# Load library to interact with Microsoft Excel.
library(openxlsx)
##################################################
# Open an Existing Workbook
##################################################
# Open the workbook and create a workbook object.
wb_in <- loadWorkbook(file = 'housing_data.xlsx')
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- '~C:/Users/dougl/Documents/GEB6895/My_Mirror/GEB6895F19-1/demo_06_Excel_with_R' # On Windows
setwd(wd_path)
# Check folder:
getwd()
# Load libraries.
# Load library to interact with Microsoft Excel.
library(openxlsx)
##################################################
# Open an Existing Workbook
##################################################
# Open the workbook and create a workbook object.
wb_in <- loadWorkbook(file = 'housing_data.xlsx')
setwd("~/GEB6895/My_Mirror/GEB6895F19-1/demo_06_Excel_with_R")
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- '~~/GEB6895/My_Mirror/GEB6895F19-1/demo_06_Excel_with_R' # On Windows
setwd(wd_path)
# Check folder:
getwd()
# Load libraries.
# Load library to interact with Microsoft Excel.
library(openxlsx)
##################################################
# Open an Existing Workbook
##################################################
# Open the workbook and create a workbook object.
wb_in <- loadWorkbook(file = 'housing_data.xlsx')
# Obtain data from the worksheet.
housing_data_frame <- readWorkbook(xlsxFile = wb_in,
sheet = 'Data')
# Inspect the data for accuracy.
summary(housing_data_frame)
View(housing_data_frame)
# Correlation matrix.
corr_matrix <- cor(housing_data_frame[, c('house_price', 'income', 'in_cali', 'earthquake')])
print(round(corr_matrix, 3))
# Regression model.
lm_full_model <- lm(data = housing_data_frame,
formula = house_price ~ income + in_cali + earthquake)
# Generate the results to write to the worksheet.
reg_results <- summary(lm_full_model)
reg_results$coefficients
# Create new worksheets to store these results.
addWorksheet(wb = wb_in, 'Correlation')
addWorksheet(wb = wb_in, 'Regression')
# Write the output to the workbook object.
writeData(wb = wb_in, sheet = 'Correlation',
x = 'Correlation Matrix for Housing Data')
writeData(wb = wb_in, sheet = 'Correlation',
x = corr_matrix,
startCol = 2, startRow = 3, rowNames = TRUE)
# Load the regression results into the workbook.
writeData(wb = wb_in, sheet = 'Regression',
x = 'Regression Results for Housing Data')
writeData(wb = wb_in, sheet = 'Regression',
x = reg_results$coefficients,
startCol = 2, startRow = 3, rowNames = TRUE)
# Write the workbook object to a new version of the Excel workbook.
saveWorkbook(wb = wb_in, 'housing_data_out.xlsx',
overwrite = TRUE)
##################################################
#
# GEB 6895: Tools for Business Intelligence
#
# Reading from and Writing to Excel Spreadsheets
#
# Lealand Morin, Ph.D.
# Assistant Professor
# Department of Economics
# College of Business Administration
# University of Central Florida
#
# October 2, 2019
#
##################################################
#
# Excel_with_R gives an example of data analysis
#   using data imported from an Excel spreadsheet
#   and the results are written to new spreeadsheets.
#
# Dependencies:
#   openxlsx
#
##################################################
##################################################
# Preparing the Workspace
##################################################
# Clear workspace.
rm(list=ls(all=TRUE))
# Set working directory.
# wd_path <- '/path/to/your/folder'
wd_path <- '~/GEB6895/My_Mirror/GEB6895F19-1/demo_06_Excel_with_R' # On Windows
setwd(wd_path)
# Check folder:
getwd()
# Load libraries.
# Load library to interact with Microsoft Excel.
library(openxlsx)
#install.packages('openxlsx')
##################################################
# Open an Existing Workbook
##################################################
# Open the workbook and create a workbook object.
wb_in <- loadWorkbook(file = 'housing_data.xlsx')
# Obtain data from the worksheet.
housing_data_frame <- readWorkbook(xlsxFile = wb_in,
sheet = 'Data')
# Inspect the data for accuracy.
summary(housing_data_frame)
#View data
View(housing_data_frame)
# Perform some analysis with the data.
# Correlation matrix.
corr_matrix <- cor(housing_data_frame[, c('house_price', 'income', 'in_cali', 'earthquake')])
print(round(corr_matrix, 3))
# Regression model.
lm_full_model <- lm(data = housing_data_frame,
formula = house_price ~ income + in_cali + earthquake)
# Generate the results to write to the worksheet.
reg_results <- summary(lm_full_model)
reg_results$coefficients
# Create new worksheets to store these results.
addWorksheet(wb = wb_in, 'Correlation')
addWorksheet(wb = wb_in, 'Regression')
# Write the output to the workbook object.
writeData(wb = wb_in, sheet = 'Correlation',
x = 'Correlation Matrix for Housing Data')
writeData(wb = wb_in, sheet = 'Correlation',
x = corr_matrix,
startCol = 2, startRow = 3, rowNames = TRUE)
# Load the regression results into the workbook.
writeData(wb = wb_in, sheet = 'Regression',
x = 'Regression Results for Housing Data')
writeData(wb = wb_in, sheet = 'Regression',
x = reg_results$coefficients,
startCol = 2, startRow = 3, rowNames = TRUE)
# Write the workbook object to a new version of the Excel workbook.
saveWorkbook(wb = wb_in, 'housing_data_out.xlsx',
overwrite = TRUE)
##################################################
# Create a New Workbook
##################################################
# Create a blank workbook object.
wb_out <- createWorkbook()
# Create worksheets.
addWorksheet(wb = wb_out, 'Data')
addWorksheet(wb = wb_out, 'Regression 1')
addWorksheet(wb = wb_out, 'Regression 2')
# Create some content.
# Regression 1: Full Model
lm_full_model <- lm(data = housing_data_frame,
formula = house_price ~ income + in_cali + earthquake)
reg_results_1 <- summary(lm_full_model)
# Regression 2: No Earthquakes
lm_no_earthquakes <- lm(data = housing_data_frame,
formula = house_price ~ income + in_cali)
reg_results_2 <- summary(lm_no_earthquakes)
# Load the data into the workbook.
writeData(wb = wb_out, sheet = 'Data',
x = housing_data_frame)
# Load the first regression results into the workbook.
writeData(wb = wb_out, sheet = 'Regression 1',
x = 'Regression Results for Housing Data: Full Model')
writeData(wb = wb_out, sheet = 'Regression 1',
x = reg_results_1$coefficients,
startCol = 2, startRow = 3, rowNames = TRUE)
# Load the second regression results into the workbook.
writeData(wb = wb_out, sheet = 'Regression 2',
x = 'Regression Results for Housing Data: No Earthquakes')
writeData(wb = wb_out, sheet = 'Regression 2',
x = reg_results_2$coefficients,
startCol = 2, startRow = 3, rowNames = TRUE)
# Write the workbook object to an Excel workbook.
saveWorkbook(wb = wb_out, "housing_data_new.xlsx",
overwrite = TRUE)
##################################################
# End
##################################################
################################################################################
# Clear workspace.
# The remove function removes everything in the workspace when the list is all.
rm(list=ls(all=TRUE))
# Load library of functions.
# source('MyRcode1.R')
# Load packages.
# library(name_of_R_package_goes_here)
install.packages("rootSolve")
setwd("~/GEB6895/My_Mirror/GEB6895F19-1/demo_07_num_methods_in_R")
#######################################################################
# Clear workspace.
# The remove function removes everything in the workspace when the list is all.
rm(list=ls(all=TRUE))
# Load library of functions.
# source('MyRcode1.R')
# Load packages.
# library(name_of_R_package_goes_here)
# Set working directory.
# The '<-' operator denotes right-to-left assignment.
wd_path <- '~/GEB6895/My_Mirror/GEB6895F19-1/demo_07_num_methods_in_R'
wd_path <- '~/GEB6895/My_Mirror/GEB6895F19-1/demo_07_num_methods_in_R' # On Windows
setwd(wd_path)
lving systems of linear equations
################################################################################
#--------------------------------------------------
# 2-dimensional system of equations.
#--------------------------------------------------
# Create a matrix and a vector.
A <- matrix(c(2, 2, 5, 10),
nrow = 2,
ncol = 2)
x <- matrix(c(1, 2),
nrow = 2,
ncol = 1)
A
x
b <- A %*% x
b
A_inv <- solve(A)
A
A_inv
det(A)
# Now use the solve function to solve for x.
x_soln <- solve(A, b)
# Compare with the original x:
x
x_soln
A_1 <- matrix(c(120, 300, 240,  # First column
60, 240, 120,  # Second column
120, 360,  60), # Third column
nrow = 3,
ncol = 3)
b_1 <- matrix(c(80, 245, 115),
nrow = 3,
ncol = 1)
# Now use the solve function to solve for x.
x_1_soln <- solve(A_1, b_1)
# Verify the solution.
A_1 %*% x_1_soln # Matches b_1
# A less efficient way is to calculate the inverse first.
# Then multiply to solve.
A_1_inv <- solve(A_1)
x_1_soln_w_inv <- A_1_inv %*% b_1
# Goal: Find the root of this function.
f <- function(x) log(x) - exp(-x)
# That is, find the x at which this function is zero.
# Goal: Find the root of this function.
f <- function(x) log(x) - exp(-x)
# That is, find the x at which this function is zero.
# Solution:
f_soln <- uniroot(f, c(0, 2), tol = 0.0001)
f_soln
# How to deal with an additional parameter.
f_with_a <- function (x, a) {x - a}
f_with_a_soln <- uniroot(f_with_a, c(0, 1), tol = 0.0001, a = 1/3)
f_with_a_soln
x_grid <- seq(0.0, 1.0, by = 0.01)
plot(x_grid, f_with_a(x = x_grid, a = 1/3),
main = 'Roots and fixed points of f(x) = x - a',
xlab = 'x',
ylab = 'f(x) = x - a',
ylim = c(-1, 2),
type = 'l', lwd = 2, col = 'red')
lines(x_grid, rep(0, length(x_grid)), lwd = 1, col = 'black')
lines(rep(f_with_a_soln$root, length(x_grid)),
seq(-1, 2, length.out = length(x_grid)),
lwd = 2, col = 'black')
# Goal: Find the root of this function.
f <- function(x) log(x) - exp(-x)
# That is, find the x at which this function is zero.
# Solution:
f_soln <- uniroot(f, c(0, 2), tol = 0.0001)
f_soln
# How to deal with an additional parameter.
f_with_a <- function (x, a) {x - a}
f_with_a_soln <- uniroot(f_with_a, c(0, 1), tol = 0.0001, a = 1/3)
f_with_a_soln
# Illustration of effect of tolerance level.
# Handheld calculator example: fixed point of cos(.):
uniroot(function(x) {cos(x) - x}, lower = -pi, upper = pi, tol = 1e-9)$root
# Compare with fewer decimal points of accuracy.
uniroot(function(x) {cos(x) - x}, lower = -pi, upper = pi, tol = 0.0001)$root
# Plot.
x_grid <- seq(0.0, 1.0, by = 0.01)
plot(x_grid,f(x_gird))
# How to deal with an additional parameter.
f_with_a <- function (x, a) {x - a}
f_with_a_soln <- uniroot(f_with_a, c(0, 1), tol = 0.0001, a = 1/3)
f_with_a_soln
# Plot.
x_grid <- seq(0.0, 1.0, by = 0.01)
plot(x_grid,f(x_grid))
# Plot.
x_grid <- seq(0.0, 2.0, by = 0.01)
plot(x_grid,f(x_grid))
# Plot.
x_grid <- seq(0.0, 2.0, by = 0.001)
plot(x_grid,f(x_grid))
# Plot.
x_grid <- seq(0.0, 1.0, by = 0.01)
plot(x_grid,f(x_grid))
plot(x_grid, f_with_a(x = x_grid, a = 1/3),
main = 'Roots and fixed points of f(x) = x - a',
xlab = 'x',
ylab = 'f(x) = x - a',
ylim = c(-1, 2),
type = 'l', lwd = 2, col = 'red')
lines(x_grid, rep(0, length(x_grid)), lwd = 1, col = 'black')
lines(rep(f_with_a_soln$root, length(x_grid)),
seq(-1, 2, length.out = length(x_grid)),
lwd = 2, col = 'black')
ration of effect of tolerance level.
# Handheld calculator example: fixed point of cos(.):
uniroot(function(x) {cos(x) - x}, lower = -pi, upper = pi, tol = 1e-9)$root
# Compare with fewer decimal points of accuracy.
uniroot(function(x) {cos(x) - x}, lower = -pi, upper = pi, tol = 0.0001)$root
# Two additional parameters.
f2_with_ab <- function (x, a, b) {(x - a)^2 - b}
f2_with_ab_soln <- uniroot(f2_with_ab, c(0, 4), tol = 0.0001,
a = 3, b = 4)
f2_with_ab_soln
# Plot.
x_grid <- seq(0.0, 6.0, by = 0.01)
plot(x_grid, f2_with_ab(x = x_grid, a = 3, b = 4),
main = 'Roots and fixed points of f(x) = (x - a)^2 - b',
xlab = 'x',
ylab = 'f(x) = (x - a)^2 - b',
# ylim = c(-1, 2),
type = 'l', lwd = 2, col = 'red')
lines(x_grid, rep(0, length(x_grid)), lwd = 1, col = 'black')
lines(rep(f2_with_ab_soln$root, length(x_grid)),
seq(-4.0, 5.0, length.out = length(x_grid)),
lwd = 2, col = 'black')
library(rootSolve)
model <- function(x) c(F1 = x[1] + x[2] + x[3]^2 - 12,
F2 = x[1]^2 - x[2] + x[3] - 2,
F3 = 2 * x[1] - x[2]^2 + x[3] - 1 )
# first solution
ss <- multiroot(model, c(1, 1, 1), useFortran = FALSE)
ss <- multiroot(f = model, start = c(1, 1, 1))
# second solution; use different start values
ss <- multiroot(model, c(0, 0, 0))
model(ss$root)
model <- function(x) c(F1 = x[1] + x[2] + x[3]^2 - 12,
F2 = x[1]^2 - x[2] + x[3] - 2,
F3 = 2 * x[1] - x[2]^2 + x[3] - 1 )
# first solution
ss <- multiroot(model, c(1, 1, 1), useFortran = FALSE)
ss <- multiroot(f = model, start = c(1, 1, 1))
# second solution; use different start values
ss <- multiroot(model, c(0, 0, 0))
model(ss$root)
==================================================================
model2 <- function(x, parms)
c(F1 = x[1] + x[2] + x[3]^2 - parms[1],
F2 = x[1]^2 - x[2] + x[3] - parms[2],
F3 = 2 * x[1] - x[2]^2 + x[3] - parms[3])
# first solution
parms <- c(12, 2, 1)
multiroot(model2, c(1, 1, 1), parms = parms)
multiroot(model2, c(0, 0, 0), parms = parms*2)
model <- function(x) c(F1 = x[1] + x[2] + x[3]^2 - 12,
F2 = x[1]^2 - x[2] + x[3] - 2,
F3 = 2 * x[1] - x[2]^2 + x[3] - 1 )
# first solution
ss <- multiroot(model, c(1, 1, 1), useFortran = FALSE)
ss <- multiroot(f = model, start = c(1, 1, 1))
# second solution; use different start values
ss <- multiroot(model, c(0, 0, 0))
model(ss$root)
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
# Get the function to print to see where the function is evaluated:
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
# "wrong" solution with unlucky interval and piecewise constant f():
f  <- function(x) ifelse(x > -1, ifelse(x < 4, exp(-1/abs(x - 1)), 10), 10)
fp <- function(x) { print(x); f(x) }
plot(f, -2,5, ylim = 0:1, col = 'red', lwd = 2)
optimize(fp, c(-4, 20))   # doesn't see the minimum
optimize(fp, c(-7, 20))   # ok
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
# Get the function to print to see where the function is evaluated:
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
# "wrong" solution with unlucky interval and piecewise constant f():
f  <- function(x) ifelse(x > -1, ifelse(x < 4, exp(-1/abs(x - 1)), 10), 10)
fp <- function(x) { print(x); f(x) }
plot(f, -2,5, ylim = 0:1, col = 'red', lwd = 2)
optimize(fp, c(-4, 20))   # doesn't see the minimum
optimize(fp, c(-7, 20))   # ok
==================================================================
model2 <- function(x, parms)
c(F1 = x[1] + x[2] + x[3]^2 - parms[1],
F2 = x[1]^2 - x[2] + x[3] - parms[2],
F3 = 2 * x[1] - x[2]^2 + x[3] - parms[3])
# first solution
parms <- c(12, 2, 1)
multiroot(model2, c(1, 1, 1), parms = parms)
multiroot(model2, c(0, 0, 0), parms = parms*2)
## =======================================================================
## example 3: find a matrix
## =======================================================================
# Find a matrix X such that X^3 = A
# where A = matrix(nrow = 5, data = 1:25, byrow = TRUE)
# This is a cubic polynomial in 25 variables.
f2<-function(x)   {
X <- matrix(nrow = 5, x)
X %*% X %*% X - matrix(nrow = 5, data = 1:25, byrow = TRUE)
}
x <- multiroot(f2, start = 1:25 )$root # One long vector.
X <- matrix(nrow = 5, x) # Convert it to a matrix.
# Verify the solution.
# 1. By direct computation
X%*%X%*%X
# 2. By evaluating the function.
f2(X)
################################################################################
# Optimization
################################################################################
#--------------------------------------------------
# Single variable equations
#--------------------------------------------------
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
# Get the function to print to see where the function is evaluated:
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
# "wrong" solution with unlucky interval and piecewise constant f():
f  <- function(x) ifelse(x > -1, ifelse(x < 4, exp(-1/abs(x - 1)), 10), 10)
fp <- function(x) { print(x); f(x) }
plot(f, -2,5, ylim = 0:1, col = 'red', lwd = 2)
optimize(fp, c(-4, 20))   # doesn't see the minimum
optimize(fp, c(-7, 20))   # ok
#--------------------------------------------------
# Multiple variable equations
#--------------------------------------------------
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
optim(c(-1.2,1), fr)
res <- optim(c(-1.2,1), fr, grr, method = "BFGS")
